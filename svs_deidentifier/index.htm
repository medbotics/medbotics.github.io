<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Medbotics Inc. | SVS De-identifier</title>

    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">

    <style>
        body { font-family: 'Inter', sans-serif; }
        .transition-all { transition: all 0.3s ease-in-out; }
        .drag-over {
            border-color: #3b82f6;
            background-color: #1f293780;
        }
    </style>
</head>

<body class="bg-gray-900 text-gray-200 flex items-center justify-center min-h-screen p-4 bg-gradient-to-br from-gray-900 to-slate-800">
    <div class="w-full max-w-2xl bg-gray-800/80 backdrop-blur-sm rounded-2xl shadow-2xl p-8 space-y-6 border border-gray-700">

        <div class="text-center space-y-2">
            <div class="flex justify-center items-center gap-3 text-white">
                <i class="fa-solid fa-shield-halved text-3xl text-blue-500"></i>
                <h1 class="text-3xl font-bold">SVS De-identifier</h1>
            </div>
            <p class="text-gray-400">Securely remove Protected Health Information (PHI) from .SVS files.</p>
            <div class="flex justify-center items-center gap-2 pt-2">
                <i class="fa-solid fa-lock text-blue-400"></i>
                <p class="text-xs text-gray-300 font-medium">Your files are processed locally and are never uploaded.</p>
            </div>
        </div>

        <div id="main-interface">
            <div id="upload-box" class="space-y-4">
                <div id="drop-zone" class="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center cursor-pointer hover:border-gray-500 transition-all">
                    <div id="drop-prompt">
                        <i class="fa-solid fa-file-arrow-up text-4xl text-gray-500"></i>
                        <p class="mt-4 text-gray-300"><strong>Drag & drop your .SVS file here</strong></p>
                        <p class="text-sm text-gray-500 mt-1">or click to browse</p>
                    </div>
                    <div id="file-info" class="hidden text-left"></div>
                </div>
                <input type="file" id="file-input" accept=".svs" class="hidden">
            </div>

            <div id="preview-and-options" class="hidden space-y-4 mt-6">
                 <div id="thumbnail-container" class="flex flex-col items-center bg-gray-900/50 p-4 rounded-lg">
                    <div class="relative w-full h-48 flex items-center justify-center">
                        <div id="thumbnail-spinner" class="text-gray-500">
                            <i class="fa-solid fa-spinner fa-spin text-3xl"></i>
                        </div>
                        <img id="thumbnail" alt="Slide thumbnail" class="hidden rounded shadow-lg border border-gray-700 cursor-zoom-in w-auto h-auto max-w-full max-h-48 object-contain">
                    </div>
                    <p id="thumb-info" class="text-xs text-gray-400 mt-2"></p>
                </div>
                <label for="vendor-mode" class="flex items-center justify-center cursor-pointer bg-gray-700/50 p-3 rounded-lg hover:bg-gray-700 transition-colors">
                    <input type="checkbox" id="vendor-mode" class="sr-only peer">
                    <div class="relative w-11 h-6 bg-gray-600 rounded-full peer peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-green-500 peer-checked:bg-green-600 peer-checked:after:translate-x-full after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all"></div>
                    <span class="ml-3 text-sm font-medium text-gray-300">Preserve vendor & scale (strip patient data only)</span>
                </label>
            </div>
        </div>

        <div class="pt-2">
            <button id="process-btn" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-all duration-300 disabled:bg-gray-600 disabled:cursor-not-allowed flex items-center justify-center gap-2">
                <i id="btn-icon" class="fa-solid fa-user-shield"></i>
                <span id="btn-text">De-identify File</span>
            </button>
            <div id="status-container" class="text-center text-sm mt-4 min-h-[20px]"></div>
        </div>

        <div id="success-screen" class="hidden text-center space-y-4 p-4 bg-green-900/20 border border-green-700 rounded-lg">
            <i class="fa-solid fa-circle-check text-5xl text-green-500"></i>
            <h3 class="text-xl font-semibold text-white">De-identification Complete!</h3>
            <p class="text-gray-300">Your file is ready for download.</p>
            <a id="download-link" href="#" download="" class="inline-block w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors duration-300">
                <i class="fa-solid fa-download mr-2"></i> Download De-identified File
            </a>
            <button id="reset-btn" class="w-full bg-gray-600 hover:bg-gray-700 text-white font-semibold py-2 px-4 rounded-lg mt-2">
                Process Another File
            </button>
        </div>
    </div>

    <div id="thumb-modal" class="fixed inset-0 z-50 bg-black/80 backdrop-blur-md hidden flex items-center justify-center p-4">
        <img id="modal-image" alt="Full-size thumbnail" class="max-w-full max-h-full rounded shadow-2xl cursor-zoom-out object-contain">
    </div>

    <script type="module">
        // WASM imports remain the same
        import initCleaner, { remove_metadata, init_panic_hook as initCleanerHook } from './svs_cleaner/pkg/svs_cleaner.js';
        import initThumb, { extract_thumbnail, init_panic_hook as initThumbHook } from './svs_thumb/pkg/svs_thumb.js';

        // Add thumbnailSpinner to the element refs
        const fileInput = document.getElementById('file-input'), processBtn = document.getElementById('process-btn'), btnIcon = document.getElementById('btn-icon'), btnText = document.getElementById('btn-text'), vendorModeCheckbox = document.getElementById('vendor-mode'), statusContainer = document.getElementById('status-container'), dropZone = document.getElementById('drop-zone'), dropPrompt = document.getElementById('drop-prompt'), fileInfo = document.getElementById('file-info'), previewAndOptions = document.getElementById('preview-and-options'), thumbnailContainer = document.getElementById('thumbnail-container'), thumbnailImg = document.getElementById('thumbnail'), thumbInfo = document.getElementById('thumb-info'), thumbModal = document.getElementById('thumb-modal'), modalImage = document.getElementById('modal-image'), mainInterface = document.getElementById('main-interface'), successScreen = document.getElementById('success-screen'), downloadLink = document.getElementById('download-link'), resetBtn = document.getElementById('reset-btn'), thumbnailSpinner = document.getElementById('thumbnail-spinner');

        let state = { file: null, isProcessing: false };

        // renderUI and resetUI logic remain mostly the same
        function renderUI() {
            processBtn.disabled = !state.file || state.isProcessing;

            if (state.isProcessing) {
                btnText.textContent = 'Processingâ€¦';
                btnIcon.className = 'fa-solid fa-spinner fa-spin';
                statusContainer.innerHTML = '<p class="text-yellow-400">Please wait, this may take a moment...</p>';
            } else {
                btnText.textContent = 'De-identify File';
                btnIcon.className = 'fa-solid fa-user-shield';
            }

            const hasFile = !!state.file;
            dropPrompt.classList.toggle('hidden', hasFile);
            fileInfo.classList.toggle('hidden', !hasFile);
            previewAndOptions.classList.toggle('hidden', !hasFile);
            
            if (hasFile) {
                fileInfo.innerHTML = `
                    <div class="flex items-center justify-between">
                         <div class="flex items-center gap-3">
                            <i class="fa-solid fa-file-lines text-2xl text-blue-400"></i>
                            <div>
                                <p class="font-semibold text-white">${state.file.name}</p>
                                <p class="text-xs text-gray-400">${(state.file.size / 1024 / 1024).toFixed(2)} MB</p>
                            </div>
                        </div>
                        <button id="remove-file-btn" class="text-gray-500 hover:text-red-500 transition-colors p-2">&times;</button>
                    </div>`;
                document.getElementById('remove-file-btn').addEventListener('click', (e) => {
                    e.stopPropagation();
                    resetUI();
                });
            }
        }
        
        function resetUI() {
            state.file = null;
            state.isProcessing = false;
            fileInput.value = '';
            statusContainer.innerHTML = '';
            mainInterface.classList.remove('hidden');
            successScreen.classList.add('hidden');
            previewAndOptions.classList.add('hidden'); // Ensure this is hidden on reset
            if (thumbnailImg.src) URL.revokeObjectURL(thumbnailImg.src);
            if (downloadLink.href) URL.revokeObjectURL(downloadLink.href);
            thumbnailImg.src = '';
            renderUI();
        }

        // CHANGED: handleFileSelect now manages the spinner visibility
        const handleFileSelect = async (file) => {
            if (!file || !file.name.toLowerCase().endsWith('.svs')) {
                statusContainer.innerHTML = '<p class="text-red-400">Please select a valid .SVS file.</p>';
                return;
            }
            state.file = file;
            statusContainer.innerHTML = '';
            renderUI();
            
            // Show the container and spinner immediately
            previewAndOptions.classList.remove('hidden');
            thumbnailSpinner.classList.remove('hidden');
            thumbnailImg.classList.add('hidden');
            thumbInfo.textContent = 'Generating preview...';

            try {
                await initThumb();
                initThumbHook();
                const data = new Uint8Array(await state.file.arrayBuffer());
                const png  = new Uint8Array(extract_thumbnail(data));
                
                if (png.length > 0) {
                    const url = URL.createObjectURL(new Blob([png], { type: 'image/png' }));
                    thumbnailImg.src = url; // This triggers the onload event below
                    thumbInfo.textContent = 'Slide Preview (click to enlarge)';
                } else {
                    thumbnailSpinner.classList.add('hidden'); // No image, so hide spinner
                    thumbInfo.textContent = 'No preview available for this slide.';
                }
            } catch (err) {
                console.warn('Thumbnail generation failed:', err);
                thumbnailSpinner.classList.add('hidden'); // Error, so hide spinner
                thumbInfo.textContent = 'Could not generate preview.';
            }
        };

        // NEW: The `onload` event for the image handles swapping the spinner for the image
        thumbnailImg.onload = () => {
            thumbnailSpinner.classList.add('hidden');
            thumbnailImg.classList.remove('hidden');
        };

        // Other event listeners remain the same
        dropZone.addEventListener('click', () => fileInput.click());
        fileInput.addEventListener('change', () => handleFileSelect(fileInput.files[0]));
        dropZone.addEventListener('dragover', (e) => { e.preventDefault(); dropZone.classList.add('drag-over'); });
        dropZone.addEventListener('dragleave', () => dropZone.classList.remove('drag-over'));
        dropZone.addEventListener('drop', (e) => { e.preventDefault(); dropZone.classList.remove('drag-over'); if (e.dataTransfer.files.length) { handleFileSelect(e.dataTransfer.files[0]); } });
        processBtn.addEventListener('click', async () => { /* ... processing logic is unchanged ... */ if(!state.file||state.isProcessing)return;state.isProcessing=!0,renderUI();try{await initCleaner(),initCleanerHook();const e=new Uint8Array(await state.file.arrayBuffer()),t=vendorModeCheckbox.checked,n=new Uint8Array(remove_metadata(e,t)),s=new Blob([n],{type:"application/octet-stream"}),i=URL.createObjectURL(s),l=state.file.name.replace(/\.svs$/i,"_deidentified.svs");downloadLink.href=i,downloadLink.download=l,mainInterface.classList.add("hidden"),processBtn.classList.add("hidden"),statusContainer.innerHTML="",successScreen.classList.remove("hidden")}catch(e){console.error(e),statusContainer.innerHTML=`<p class="text-red-400 font-semibold"><i class="fa-solid fa-triangle-exclamation mr-2"></i>An error occurred: ${e.message||e}</p>`}finally{state.isProcessing=!1,processBtn.disabled=!1,btnText.textContent="De-identify File",btnIcon.className="fa-solid fa-user-shield"} });
        resetBtn.addEventListener('click', () => { processBtn.classList.remove('hidden'); resetUI(); });
        thumbnailImg.addEventListener('click', () => { if (thumbnailImg.src) { modalImage.src = thumbnailImg.src; thumbModal.classList.remove('hidden'); } });
        thumbModal.addEventListener('click', () => thumbModal.classList.add('hidden'));
        document.addEventListener('keydown', e => { if (e.key === 'Escape') thumbModal.classList.add('hidden'); });

        renderUI();
    </script>
</body>
</html>
